const std = @import("std");
const guilite = @import("zguilite");
const x11 = @import("./x11.zig");
const int = guilite.types.int;
const uint = guilite.types.uint;

const UI_WIDTH: int = 240;
const UI_HEIGHT: int = 320;
const s_wave_data1 = [_]u8{
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E, 0x7E, 0x7F, 0x81, 0x81, 0x82, 0x82, 0x83, 0x84, 0x84, 0x84, 0x84, 0x83, 0x82, 0x82, 0x81,
    0x81, 0x7F, 0x7F, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7C, 0x7B, 0x7A, 0x79, 0x7A, 0x82,
    0x89, 0x91, 0x98, 0x9F, 0xA2, 0x9B, 0x94, 0x8C, 0x85, 0x7E, 0x78, 0x79, 0x7A, 0x7B, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
    0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7E, 0x7F, 0x7F, 0x81, 0x81, 0x82, 0x83, 0x84, 0x84, 0x85, 0x86, 0x87, 0x87, 0x87, 0x88, 0x88,
    0x89, 0x89, 0x89, 0x8A, 0x8A, 0x8A, 0x8A, 0x89, 0x89, 0x88, 0x88, 0x87, 0x87, 0x85, 0x85, 0x85, 0x83, 0x82, 0x81, 0x81, 0x7F, 0x7E, 0x7E, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D, 0x7D,
};
const s_wave_data2 = [_]u8{
    0x21, 0x22, 0x23, 0x22, 0x21, 0x20, 0x1E, 0x1C, 0x1B, 0x19, 0x18, 0x16, 0x14, 0x12, 0x11, 0x10, 0x0F, 0x0D, 0x0C, 0x0A, 0x09, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x06, 0x0E, 0x18, 0x23, 0x2D, 0x37, 0x40, 0x49, 0x51, 0x57, 0x5A, 0x5A, 0x59, 0x55, 0x50, 0x49, 0x42, 0x3B, 0x34, 0x2F, 0x29, 0x24, 0x20, 0x1F, 0x1e, 0x1d, 0x1f,
};
const s_wave_data3 = [_]u8{
    0x53, 0x53, 0x53, 0x52, 0x53, 0x53, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x54, 0x54, 0x54, 0x54, 0x55, 0x55, 0x55,
    0x55, 0x56, 0x57, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5F, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x75, 0x77, 0x79, 0x7B, 0x7D, 0x80, 0x82, 0x84, 0x87, 0x89, 0x8B,
    0x8D, 0x8F, 0x91, 0x93, 0x94, 0x96, 0x97, 0x98, 0x9A, 0x9B, 0x9C, 0x9C, 0x9D, 0x9E, 0x9E, 0x9E, 0x9E, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9F, 0x9E, 0x9F, 0x9E, 0x9E, 0x9E, 0x9E, 0x9E,
    0x9E, 0x9E, 0x9D, 0x9D, 0x9D, 0x9D, 0x9C, 0x9C, 0x9C, 0x9C, 0x9B, 0x9B, 0x9A, 0x9A, 0x9A, 0x99, 0x99, 0x98, 0x98, 0x98, 0x97, 0x97, 0x96, 0x96, 0x96, 0x95, 0x95, 0x94, 0x94, 0x93, 0x93, 0x92,
    0x92, 0x91, 0x91, 0x90, 0x90, 0x8F, 0x8F, 0x8E, 0x8E, 0x8D, 0x8D, 0x8C, 0x8B, 0x8B, 0x8A, 0x8A, 0x89, 0x89, 0x88, 0x88, 0x87, 0x87, 0x86, 0x85, 0x85, 0x85, 0x84, 0x83, 0x83, 0x82, 0x82, 0x81,
    0x81, 0x80, 0x7F, 0x7F, 0x7E, 0x7D, 0x7D, 0x7C, 0x7B, 0x7B, 0x7A, 0x7A, 0x79, 0x78, 0x77, 0x77, 0x76, 0x75, 0x74, 0x74, 0x73, 0x72, 0x71, 0x71, 0x70, 0x6F, 0x6F, 0x6E, 0x6D, 0x6D, 0x6C, 0x6B,
    0x6A, 0x6A, 0x69, 0x69, 0x68, 0x67, 0x66, 0x66, 0x65, 0x65, 0x64, 0x64, 0x63, 0x63, 0x62, 0x62, 0x61, 0x61, 0x61, 0x60, 0x60, 0x5F, 0x5F, 0x5F, 0x5E, 0x5E, 0x5D, 0x5D, 0x5D, 0x5C, 0x5C, 0x5C,
    0x5B, 0x5B, 0x5B, 0x5B, 0x5B, 0x5A, 0x5A, 0x5A, 0x59, 0x59, 0x59, 0x58, 0x58, 0x57, 0x57, 0x57, 0x56, 0x56, 0x55, 0x55, 0x55, 0x55, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x53, 0x54, 0x53, 0x53,
};

var m_wave_buffer1: guilite.WaveBuffer = .{};
var m_wave_buffer2: guilite.WaveBuffer = .{};
var m_wave_buffer3: guilite.WaveBuffer = .{};

pub fn init() !void {
    if (wave1) |wave| {
        wave.set_wave_in_out_rate(256, 17);
        wave.set_wave_speed(1);
        wave.set_wave_color(guilite.GL_RGB(0, 255, 0));
        wave.set_wave(&m_wave_buffer1);
        wave.set_max_min(170, 110);
    } else {
        guilite.ASSERT(false);
    }
    if (wave2) |wave| {
        wave.set_wave_in_out_rate(60, 17);
        wave.set_wave_speed(1);
        wave.set_wave_color(guilite.GL_RGB(41, 189, 189));
        wave.set_wave(&m_wave_buffer2);
        wave.set_max_min(100, 0);
    }
    if (wave3) |wave| {
        wave.set_wave_in_out_rate(128, 17);
        wave.set_wave_speed(1);
        wave.set_wave_color(guilite.GL_RGB(255, 255, 0));
        wave.set_wave(&m_wave_buffer3);
        wave.set_max_min(180, 80);
        wave.set_wave_name("hello");
        wave.set_wave_unit("world");
    }
}
var data_index1: usize = 0;
var data_index2: usize = 0;
var data_index3: usize = 0;

var wave_index: usize = 0;
pub var wave1: ?*guilite.WaveCtrl = null;
pub var wave2: ?*guilite.WaveCtrl = null;
pub var wave3: ?*guilite.WaveCtrl = null;
pub fn refrushWaveCtrl() !void {
    std.log.debug("refrushWaveCtrl", .{});

    _ = m_wave_buffer1.write_wave_data(s_wave_data1[data_index1]);
    _ = m_wave_buffer1.write_wave_data(s_wave_data1[data_index1]);
    _ = m_wave_buffer1.write_wave_data(s_wave_data1[data_index1]);
    _ = m_wave_buffer1.write_wave_data(s_wave_data1[data_index1]);
    data_index1 += 1;
    data_index1 %= s_wave_data1.len;

    _ = m_wave_buffer2.write_wave_data(s_wave_data2[data_index2]);
    data_index2 += 1;
    data_index2 %= s_wave_data2.len;

    _ = m_wave_buffer3.write_wave_data(s_wave_data3[data_index3]);
    _ = m_wave_buffer3.write_wave_data(s_wave_data3[data_index3]);
    data_index3 += 1;
    data_index3 %= s_wave_data2.len;

    if (wave1) |wave| {
        try wave.refresh_wave(@as(u8, @truncate(wave_index)));
    }
    if (wave2) |wave| {
        try wave.refresh_wave(@as(u8, @truncate(wave_index)));
    }
    if (wave3) |wave| {
        try wave.refresh_wave(@as(u8, @truncate(wave_index)));
    }
    wave_index +%= 1;
}
